{"version":3,"sources":["webpack://qwerty-log/./node_modules/@heroicons/react/solid/esm/TagIcon.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/toDate/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/compareAsc/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/assign/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/en-US/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/formatDistanceStrict/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/constants/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/parseISO/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/isDate/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/isValid/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/addMilliseconds/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/subMilliseconds/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/format/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/ja/_lib/formatDistance/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/ja/_lib/formatLong/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/ja/_lib/formatRelative/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/ja/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/ja/_lib/localize/index.js","webpack://qwerty-log/./node_modules/date-fns/esm/locale/ja/_lib/match/index.js","webpack://qwerty-log/./src/components/tag-list.js","webpack://qwerty-log/./node_modules/date-fns/esm/formatDistanceToNowStrict/index.js"],"names":["props","Object","assign","xmlns","viewBox","fill","fillRule","d","clipRule","getTimezoneOffsetInMilliseconds","date","utcDate","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","getTime","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","prototype","toString","call","console","warn","Error","stack","NaN","compareAsc","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","diff","cloneObject","dirtyObject","target","property","hasOwnProperty","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","token","count","options","result","tokenValue","replace","addSuffix","comparison","buildFormatLongFn","undefined","width","String","defaultWidth","format","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","dirtyIndex","dirtyOptions","valuesArray","context","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","value","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","pattern","test","findKey","valueCallback","rest","slice","object","predicate","array","buildMatchPatternFn","parseResult","parsePattern","code","formatDistance","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parseInt","any","index","weekStartsOn","firstWeekContainsDate","MILLISECONDS_IN_MINUTE","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","formatDistanceStrict","dirtyDate","dirtyBaseDate","locale","RangeError","isNaN","localizeOptions","Boolean","roundingMethodFn","roundingMethod","Math","floor","ceil","round","unit","milliseconds","minutes","timezoneOffset","dstNormalizedMinutes","seconds","roundedMinutes","hours","days","months","years","pow","millisecondsInHour","toInteger","parseISO","additionalDigits","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","year","offset","timestamp","parseTime","timezone","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseTimezone","patterns","dateTimeDelimiter","timeZoneDelimiter","dateRegex","timeRegex","timezoneRegex","dateString","timeString","split","substr","exec","regex","RegExp","captures","century","isWeekDate","dayOfYear","parseDateUnit","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","parseTimeUnit","validateTime","parseFloat","timezoneString","sign","_hours","validateTimezone","isDate","isValid","addMilliseconds","dirtyAmount","amount","subMilliseconds","MILLISECONDS_IN_DAY","startOfUTCISOWeek","setUTCHours","getUTCISOWeekYear","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","fourthOfJanuary","MILLISECONDS_IN_WEEK","startOfUTCWeek","localeWeekStartsOn","defaultWeekStartsOn","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","addLeadingZeros","targetLength","output","abs","y","signedYear","M","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","dayPeriodEnum","formatTimezoneShort","dirtyDelimiter","absOffset","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","G","lightFormatters","Y","signedWeekYear","weekYear","R","u","Q","q","L","w","getUTCWeek","I","isoWeek","getUTCISOWeek","D","setUTCMonth","startOfYearTimestamp","difference","getUTCDayOfYear","E","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","B","K","k","X","_localize","_originalDate","getTimezoneOffset","x","O","z","t","originalDate","T","dateLongFormatter","timeLongFormatter","p","P","dateTimeFormat","datePattern","timePattern","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","input","concat","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","cleanEscapedString","oneWithSuffix","otherWithSuffix","post","toNow","className","Link","to","frontmatter","tags","map","tag","now","formatDistanceToNowStrict","ja","dirtyFormatStr","formatStr","formatterOptions","substring","firstCharacter","longFormatter","join","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens"],"mappings":"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","file":"dffd9eda1bde23af0ce146d568b45c289f422d0a-ce5f7cfd36b0818aed19.js","sourcesContent":["import * as React from \"react\";\n\nfunction TagIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nexport default TagIcon;","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function formatDistance(token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // TODO: Remove String()\n\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function valueCallback(value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function valueCallback(index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function ordinalNumber(dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function argumentCallback(quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && options.unit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function M(date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function d(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function a(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function H(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function m(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function s(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function G(date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function y(date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function Y(date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function R(date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function u(date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function Q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function M(date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function L(date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function w(date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function I(date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function d(date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function D(date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function E(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function e(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function c(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function i(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function a(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function b(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function B(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function H(date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function K(date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function k(date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function m(date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function s(date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function X(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function x(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function O(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function z(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function t(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function T(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: '1秒未満',\n    other: '{{count}}秒未満',\n    oneWithSuffix: '約1秒',\n    otherWithSuffix: '約{{count}}秒'\n  },\n  xSeconds: {\n    one: '1秒',\n    other: '{{count}}秒'\n  },\n  halfAMinute: '30秒',\n  lessThanXMinutes: {\n    one: '1分未満',\n    other: '{{count}}分未満',\n    oneWithSuffix: '約1分',\n    otherWithSuffix: '約{{count}}分'\n  },\n  xMinutes: {\n    one: '1分',\n    other: '{{count}}分'\n  },\n  aboutXHours: {\n    one: '約1時間',\n    other: '約{{count}}時間'\n  },\n  xHours: {\n    one: '1時間',\n    other: '{{count}}時間'\n  },\n  xDays: {\n    one: '1日',\n    other: '{{count}}日'\n  },\n  aboutXWeeks: {\n    one: '約1週間',\n    other: '約{{count}}週間'\n  },\n  xWeeks: {\n    one: '1週間',\n    other: '{{count}}週間'\n  },\n  aboutXMonths: {\n    one: '約1か月',\n    other: '約{{count}}か月'\n  },\n  xMonths: {\n    one: '1か月',\n    other: '{{count}}か月'\n  },\n  aboutXYears: {\n    one: '約1年',\n    other: '約{{count}}年'\n  },\n  xYears: {\n    one: '1年',\n    other: '{{count}}年'\n  },\n  overXYears: {\n    one: '1年以上',\n    other: '{{count}}年以上'\n  },\n  almostXYears: {\n    one: '1年近く',\n    other: '{{count}}年近く'\n  }\n};\n\nvar formatDistance = function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    if (options.addSuffix && tokenValue.oneWithSuffix) {\n      result = tokenValue.oneWithSuffix;\n    } else {\n      result = tokenValue.one;\n    }\n  } else {\n    if (options.addSuffix && tokenValue.otherWithSuffix) {\n      result = tokenValue.otherWithSuffix.replace('{{count}}', String(count));\n    } else {\n      result = tokenValue.other.replace('{{count}}', String(count));\n    }\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return result + '後';\n    } else {\n      return result + '前';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'y年M月d日EEEE',\n  long: 'y年M月d日',\n  medium: 'y/MM/dd',\n  short: 'y/MM/dd'\n};\nvar timeFormats = {\n  full: 'H時mm分ss秒 zzzz',\n  long: 'H:mm:ss z',\n  medium: 'H:mm:ss',\n  short: 'H:mm'\n};\nvar dateTimeFormats = {\n  full: '{{date}} {{time}}',\n  long: '{{date}} {{time}}',\n  medium: '{{date}} {{time}}',\n  short: '{{date}} {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: '先週のeeeeのp',\n  yesterday: '昨日のp',\n  today: '今日のp',\n  tomorrow: '明日のp',\n  nextWeek: '翌週のeeeeのp',\n  other: 'P'\n};\n\nvar formatRelative = function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n/**\n * @type {Locale}\n * @category Locales\n * @summary Japanese locale.\n * @language Japanese\n * @iso-639-2 jpn\n * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}\n * @author Yamagishi Kazutoshi [@ykzts]{@link https://github.com/ykzts}\n * @author Luca Ban [@mesqueeb]{@link https://github.com/mesqueeb}\n * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}\n * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}\n */\n\nvar locale = {\n  code: 'ja',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['BC', 'AC'],\n  abbreviated: ['紀元前', '西暦'],\n  wide: ['紀元前', '西暦']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['第1四半期', '第2四半期', '第3四半期', '第4四半期']\n};\nvar monthValues = {\n  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n  wide: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n};\nvar dayValues = {\n  narrow: ['日', '月', '火', '水', '木', '金', '土'],\n  short: ['日', '月', '火', '水', '木', '金', '土'],\n  abbreviated: ['日', '月', '火', '水', '木', '金', '土'],\n  wide: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  abbreviated: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  wide: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  abbreviated: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  },\n  wide: {\n    am: '午前',\n    pm: '午後',\n    midnight: '深夜',\n    noon: '正午',\n    morning: '朝',\n    afternoon: '午後',\n    evening: '夜',\n    night: '深夜'\n  }\n};\n\nvar ordinalNumber = function ordinalNumber(dirtyNumber, dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   const options = dirtyOptions || {}\n  //   const unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var options = dirtyOptions || {};\n  var unit = String(options.unit);\n\n  switch (unit) {\n    case 'year':\n      return \"\".concat(number, \"\\u5E74\");\n\n    case 'quarter':\n      return \"\\u7B2C\".concat(number, \"\\u56DB\\u534A\\u671F\");\n\n    case 'month':\n      return \"\".concat(number, \"\\u6708\");\n\n    case 'week':\n      return \"\\u7B2C\".concat(number, \"\\u9031\");\n\n    case 'date':\n      return \"\".concat(number, \"\\u65E5\");\n\n    case 'hour':\n      return \"\".concat(number, \"\\u6642\");\n\n    case 'minute':\n      return \"\".concat(number, \"\\u5206\");\n\n    case 'second':\n      return \"\".concat(number, \"\\u79D2\");\n\n    default:\n      return \"\".concat(number);\n  }\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function argumentCallback(quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nimport buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nvar matchOrdinalNumberPattern = /^第?\\d+(年|四半期|月|週|日|時|分|秒)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(B\\.?C\\.?|A\\.?D\\.?)/i,\n  abbreviated: /^(紀元[前後]|西暦)/i,\n  wide: /^(紀元[前後]|西暦)/i\n};\nvar parseEraPatterns = {\n  narrow: [/^B/i, /^A/i],\n  any: [/^(紀元前)/i, /^(西暦|紀元後)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^Q[1234]/i,\n  wide: /^第[1234一二三四１２３４]四半期/i\n};\nvar parseQuarterPatterns = {\n  any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^([123456789]|1[012])/,\n  abbreviated: /^([123456789]|1[012])月/i,\n  wide: /^([123456789]|1[012])月/i\n};\nvar parseMonthPatterns = {\n  any: [/^1\\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]\n};\nvar matchDayPatterns = {\n  narrow: /^[日月火水木金土]/,\n  short: /^[日月火水木金土]/,\n  abbreviated: /^[日月火水木金土]/,\n  wide: /^[日月火水木金土]曜日/\n};\nvar parseDayPatterns = {\n  any: [/^日/, /^月/, /^火/, /^水/, /^木/, /^金/, /^土/]\n};\nvar matchDayPeriodPatterns = {\n  any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^(A|午前)/i,\n    pm: /^(P|午後)/i,\n    midnight: /^深夜|真夜中/i,\n    noon: /^正午/i,\n    morning: /^朝/i,\n    afternoon: /^午後/i,\n    evening: /^夜/i,\n    night: /^深夜/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function valueCallback(value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function valueCallback(index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import { TagIcon } from \"@heroicons/react/solid\"\nimport { format, formatDistanceToNowStrict, parseISO } from \"date-fns\"\nimport { ja } from \"date-fns/locale\"\nimport { Link } from \"gatsby\"\nimport React from \"react\"\nimport Tag from \"./tag\"\n\nconst TagList = ({ post, toNow = false }) => {\n  return (\n    <div className=\"flex flex-wrap items-center\">\n      <Link to={`/tags`}>\n        <TagIcon className=\"w-5 h-5 text-my-black hover:text-gray-700 duration-200 transition-colors\" />\n      </Link>\n      {post.frontmatter.tags?.map((tag, index) => (\n        <li key={index}>\n          <Tag value={tag} />\n        </li>\n      ))}\n      <small className=\"flex-grow text-right\">\n        {toNow\n          ? formatDistanceToNowStrict(parseISO(post.frontmatter.date), {\n              locale: ja,\n            })\n          : format(parseISO(post.frontmatter.date), \"yyyy年M月d日\")}\n      </small>\n    </div>\n  )\n}\nexport default TagList\n","import formatDistanceStrict from \"../formatDistanceStrict/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * var result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceToNowStrict(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return formatDistanceStrict(dirtyDate, Date.now(), dirtyOptions);\n}"],"sourceRoot":""}